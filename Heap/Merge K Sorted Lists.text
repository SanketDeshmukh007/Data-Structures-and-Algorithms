class compare
{
    public:
    bool operator()(ListNode *a,ListNode *b)
    {
        return a->val > b->val;
    }
};

ListNode* mergeKLists(vector<ListNode*>& lists) {
        ios_base::sync_with_stdio(false);
        cin.tie(0);
        cout.tie(0);
        
        priority_queue<ListNode*,vector<ListNode*>,compare> p;
        
        int k = lists.size();
        
        if(k == 0) return NULL;
        
        for(int i = 0; i < k; i++)
        {
            if(lists[i] != NULL)
                p.push(lists[i]);
        }
        
        ListNode *head = NULL;
        ListNode *tail = NULL;
        
        while(!p.empty())
        {
            ListNode *temp = p.top();
            p.pop();
            
            if(head == NULL)
            {
                head = temp;
                tail = temp;     
            }
            else
            {
                tail->next = temp;
                tail = temp;
            }
            
            if(tail->next)
                p.push(tail->next);
            
        }
        return head;
    }